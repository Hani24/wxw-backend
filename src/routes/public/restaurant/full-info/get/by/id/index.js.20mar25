const express = require('express');
const router = express.Router();

/*
{
  "id": "required: <number> Ref. Restaurant.id"
}
*/

// /public/restaurant/full-info/get/by/id/:id

module.exports = function (App, RPath) {

  router.use('', async (req, res) => {

    try {

      const mUser = await req.user;
      const mClient = await req.client;

      const data = req.getPost();
      const id = req.getCommonDataInt('id', null);
      console.debug({ id });

      if (App.isNull(id))
        return App.json(res, 417, App.t(['Restaurant', 'id', 'is-required'], req.lang));

      const mRestaurant = await App.getModel('Restaurant').findOne({
        where: {
          id,
          isVerified: true,
          isRestricted: false,
        },
        attributes: [
          'id', 'image', 'name', 'description', 'zip', 'street', 'rating',
          'type', 'lat', 'lon', 'isOpen', 'createdAt',
          'shareableLink'
          //,'updatedAt',
        ],
        include: [{
          model: App.getModel('City'),
          attributes: ['id', 'name'],
          required: true,
          include: [{
            model: App.getModel('State'),
            attributes: ['id', 'name', 'code']
          }]
        }]
      });

      if (!App.isObject(mRestaurant) || !App.isPosNumber(mRestaurant.id))
        return App.json(res, 404, App.t(['Restaurant', 'id', 'not-found'], req.lang));

      mRestaurant.dataValues.distance = 0;
      mRestaurant.dataValues.distanceType = '';

    //  if (App.isObject(mUser) || (res.info.lat && res.info.lon)) {
    //    const { unitType } = await App.getModel('DeliveryPriceSettings').getSettings();
    //    const mFrom = App.isObject(mUser) ? mUser : res.info;
    //    const distRes = App.geo.lib.getDistance(mFrom, mRestaurant, unitType || 'miles');
    //    if (distRes.success) {
    //      mRestaurant.dataValues.distance = distRes.data.distance;
    //      mRestaurant.dataValues.distanceType = distRes.data.units;
     //   }
     // }
	  if (App.isObject(mUser) || (res.info.lat && res.info.lon)) {
  const mDeliveryPriceSettings = await App.getModel('DeliveryPriceSettings').getSettings();
  
  let deliveryCoords = { lat: mUser.lat, lon: mUser.lon }; // Default to user's coordinates
  
  const defaultAddress = await App.getModel('DeliveryAddress').findOne({
    where: {
      clientId: mClient.id,
      isDefault: true,
      isDeleted: false,
    },
  });
  
  if (defaultAddress) {
    deliveryCoords = {
      lat: defaultAddress.lat,
      lon: defaultAddress.lon,
    };
  }
  
  const distRes = App.geo.lib.getDistance(deliveryCoords, mRestaurant, mDeliveryPriceSettings.unitType || 'miles');
  if (distRes.success) {
    mRestaurant.dataValues.distance = distRes.data.distance;
    mRestaurant.dataValues.distanceType = distRes.data.units;
  }
}

      mRestaurant.dataValues.State = mRestaurant.City.State;
      delete mRestaurant.City.dataValues.State;

      const mWorkingTime = await App.getModel('RestaurantWorkingTime')
        .getAsObjectByRestaurantId(mRestaurant.id);

      // console.json({ mWorkingTime });

      App.json(res, true, App.t(['success'], res.lang), {
        info: mRestaurant,
        workingTime: mWorkingTime,
      });

    } catch (e) {
      console.log(e);
      App.onRouteError(req, res, e);
      // App.json( res, false, App.t('request-could-not-be-processed', req.lang) );
    }

  });

  return { router, method: '', autoDoc: {} };

};


